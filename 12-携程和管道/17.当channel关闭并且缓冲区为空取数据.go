package main

import (
	"fmt"
)

func main() {
	ch := make(chan int)
	close(ch) // 关闭通道

	// 尝试接收消息
	value, ok := <-ch      // 接收将返回零值和 false
	fmt.Println(value, ok) // 输出：0 false
}

/**
当一个通道（channel）被关闭并且缓冲区为空时，继续从该通道接收消息将会返回通道的零值。具体来说，以下情况会发生：

**关闭的通道**：如果你尝试从一个已经关闭的通道接收消息，且缓冲区为空，
接收操作将会立即返回通道类型的零值，同时 `ok` 标志（如果使用的情况下）会被设置为 `false`。

在上面的示例中，`ch` 被关闭，接收操作将返回通道类型的零值（对于 `int` 类型为 `0`），并且 `ok` 为 `false`，表示通道已经关闭。

- 从已关闭的、缓冲区为空的通道接收消息，得到通道类型的零值。
- 使用 `ok` 变量可以检查通道是否已经关闭。
*/
